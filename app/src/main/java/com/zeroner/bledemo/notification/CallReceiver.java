package com.zeroner.bledemo.notification;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.media.AudioManager;import android.net.Uri;import android.os.Build;import android.os.RemoteException;import android.provider.ContactsContract;import android.telephony.PhoneStateListener;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.util.Log;import com.android.internal.telephony.ITelephony;import com.socks.library.KLog;import com.zeroner.bledemo.BleApplication;import com.zeroner.bledemo.utils.BaseActionUtils;import com.zeroner.blemidautumn.bluetooth.SuperBleSDK;import com.zeroner.blemidautumn.bluetooth.cmdimpl.ProtoBufSendBluetoothCmdImpl;import com.zeroner.blemidautumn.task.BackgroundThreadManager;import com.zeroner.blemidautumn.task.BleWriteDataTask;import java.lang.ref.WeakReference;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.concurrent.Executor;import java.util.concurrent.Executors;public class CallReceiver extends BroadcastReceiver {    public static final boolean D = true;    private final String TAG = this.getClass().getSimpleName();    private static String incomingNumber = null;    private WeakReference<Context> mApp;    private TelephonyManager tm;    private AudioManager aManager;    @Override    public void onReceive(Context context, Intent intent) {        if (D) Log.e(TAG, "+++ ON RECEIVE +++" + intent.getAction().toString());        mApp = new WeakReference<Context>(context);        tm = (TelephonyManager) mApp.get().getSystemService(Service.TELEPHONY_SERVICE);        aManager = (AudioManager) mApp.get().getSystemService(Context.AUDIO_SERVICE);//        PhoneStateListener listener = new PhoneStateListener(){//            @Override//            public void onCallStateChanged(int state, String incomingNumber) {//                super.onCallStateChanged(state, incomingNumber);//                Log.e("aaaaa:aaaaa",state+"---"+incomingNumber);//            }//        };////        tm.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);        if (Build.VERSION.SDK_INT > 27) {            tm.listen(new MyPhoneListener(),                    PhoneStateListener.LISTEN_CALL_STATE);        }        switch (tm.getCallState()) {            case TelephonyManager.CALL_STATE_RINGING:                incomingNumber = intent.getStringExtra("incoming_number");                Contact contact = getContact(context, incomingNumber);                if (!"".equals(contact.getDisplayName()) && contact != null && contact.getDisplayName() != null) {                    NotificationBiz.addMsg(0x01, contact.getDisplayName());                }                break;            case TelephonyManager.CALL_STATE_OFFHOOK:            case TelephonyManager.CALL_STATE_IDLE:                if(SuperBleSDK.isProtoBuf(BleApplication.getInstance())){                    byte[] datas = ProtoBufSendBluetoothCmdImpl.getInstance().setMsgNotificationNotifyByCall(999999,1,true,true,true,"","");                    BackgroundThreadManager.getInstance().addWriteData(BleApplication.getInstance(),datas);                }else{                    byte[] datas = SuperBleSDK.getSDKSendBluetoothCmdImpl(context).setShakeMode(0, 0, 0, null);                    BleWriteDataTask task = new BleWriteDataTask(context, datas);                    BackgroundThreadManager.getInstance().addTask(task);                }                break;            default:                break;        }        if(intent.getAction().equals(BaseActionUtils.Action_Phone_Statue_Out)){            try {//			toEnd();//            endCall();                boolean isok = endCall(context);                KLog.e("=================挂断电话结果？？"+isok);            } catch (Exception e) {                e.printStackTrace();            }        }    }    public static boolean endCall(Context context) {        boolean callSuccess = false;        ITelephony telephonyService = getTelephonyService(context);        try {            if (telephonyService != null) {                callSuccess = telephonyService.endCall();            }        } catch (RemoteException e) {            e.printStackTrace();            killCall(context);        } catch (Exception e){            e.printStackTrace();            killCall(context);        }        if (!callSuccess) {            Executor eS = Executors.newSingleThreadExecutor();            eS.execute(new Runnable() {                @Override                public void run() {                    disconnectCall();                }            });            callSuccess = true;        }        return callSuccess;    }    private static boolean disconnectCall() {        Runtime runtime = Runtime.getRuntime();        try {            runtime.exec("service call phone 5 \n");        } catch (Exception exc) {            exc.printStackTrace();            return false;        }        return true;    }    private static ITelephony getTelephonyService(Context context) {        TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);        Class clazz;        try {            clazz = Class.forName(telephonyManager.getClass().getName());            Method method = clazz.getDeclaredMethod("getITelephony");            method.setAccessible(true);            return (ITelephony) method.invoke(telephonyManager);        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        return null;    }    // 使用endCall挂断不了，再使用killCall反射调用再挂一次    public static boolean killCall(Context context) {        try {            // Get the boring old TelephonyManager            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);            // Get the getITelephony() method            Class classTelephony = Class.forName(telephonyManager.getClass().getName());            Method methodGetITelephony = classTelephony.getDeclaredMethod("getITelephony");            // Ignore that the method is supposed to be private            methodGetITelephony.setAccessible(true);            // Invoke getITelephony() to get the ITelephony interface            Object telephonyInterface = methodGetITelephony.invoke(telephonyManager);            // Get the endCall method from ITelephony            Class telephonyInterfaceClass = Class.forName(telephonyInterface.getClass().getName());            Method methodEndCall = telephonyInterfaceClass.getDeclaredMethod("endCall");            // Invoke endCall()            methodEndCall.invoke(telephonyInterface);        } catch (Exception ex) { // Many things can go wrong with reflection calls            ex.printStackTrace();            return false;        }        return true;    }    private class MyPhoneListener extends PhoneStateListener{        @Override        public void onCallStateChanged(int state, String incomingNumber) {            super.onCallStateChanged(state, incomingNumber);            KLog.i("no2855============="+incomingNumber +" == "+state);            if( state== TelephonyManager.CALL_STATE_RINGING){                Contact contact = getContact(BleApplication.getInstance(), incomingNumber);                if (!"".equals(contact.getDisplayName()) && contact != null && contact.getDisplayName() != null) {                    NotificationBiz.addMsg(0x01, contact.getDisplayName());                }            }//            else if(state== TelephonyManager.CALL_STATE_OFFHOOK){//                offHook();//            }else if(state== TelephonyManager.CALL_STATE_IDLE){//                idle();//            }        }    }    public static Contact getContact(Context context, String phoneNumber) {        Contact contact = new Contact(phoneNumber);        if (TextUtils.isEmpty(phoneNumber)) {            contact.setDisplayName("");        }        Cursor cursor = null;        try {            Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber));            cursor = context.getContentResolver().query(uri, new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME, ContactsContract.PhoneLookup.TYPE, ContactsContract.PhoneLookup.LABEL}, null, null, ContactsContract.PhoneLookup.DISPLAY_NAME + " LIMIT 1");            while (cursor.moveToNext()) {                contact.setDisplayName(cursor.getString(cursor.getColumnIndex(ContactsContract.PhoneLookup.DISPLAY_NAME)));                break;            }        } catch (Exception e) {            contact.setDisplayName(phoneNumber);        } finally {            if (cursor != null) {                cursor.close();            }        }        return contact;    }    public static class Contact {        private String number;        private String displayName;        public Contact(String phoneNumber) {            this.number = phoneNumber;            this.displayName = phoneNumber;        }        public String getNumber() {            return number;        }        public void setNumber(String number) {            this.number = number;        }        public String getDisplayName() {            return displayName;        }        public void setDisplayName(String displayName) {            this.displayName = displayName;        }    }}